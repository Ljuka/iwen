import os
import shutil
import re
import math


def createStartFolderStructure(path):
    if os.path.isdir(path+'/Iwen Colours'):
         shutil.rmtree(path+'/Iwen Colours')

    os.mkdir(path+'/Iwen Colours')
    os.mkdir(path+'/Iwen Colours/IOS')
    os.mkdir(path+'/Iwen Colours/IOS/Colours.xcassets')
    os.mkdir(path+'/Iwen Colours/Android')

def makeColourCodeForIOS(path, colours):
        file = open(path + '/Iwen Colours/IOS/Colours.swift', 'w+')
        file.write('// Colour palette generated by Iwen \r\nimport UIKit\r\n \r\nextension UIColor { \r\n\r\n')

        for colour in colours:
            if 'fontColor' in colour['representations'][0]['content']:
                pass

            else:
                if colour['type'].find("gradient") == -1:
                    if 'value' in colour['representations'][0]['content']:
                        r = colour['representations'][0]['content']['value']['r']
                        g = colour['representations'][0]['content']['value']['g']
                        b = colour['representations'][0]['content']['value']['b']
                    else:
                        r = colour['representations'][0]['content'][0]['color']['value']['r']
                        g = colour['representations'][0]['content'][0]['color']['value']['g']
                        b = colour['representations'][0]['content'][0]['color']['value']['b']
                    alpha = "1.000" if 'alpha' not in colour['representations'][0]['content'] else round(
                        colour['representations'][0]['content']['alpha'], 3)

                    # Setting name to be #hex format if colour name is empty
                    if colour['name'] != '':
                        colourName = trimName(colour['name'])
                    else:
                        colourName = 'colour_'+str(convertToHex(r) + convertToHex(g) + convertToHex(b))

                    file.write('\t@nonobjc class var '+colourName+': UIColor {\r\n\t\treturn UIColor(red: '+str(r)+', green: '+str(g)+', blue: '+str(b)+', alpha: '+str(alpha)+')\r\n\t}\r\n\r\n')

                else:
                    br = 0
                    for gradient in colour['representations'][0]['content']:
                        br += 1
                        r = gradient['color']['value']['r']
                        g = gradient['color']['value']['g']
                        b = gradient['color']['value']['b']
                        alpha = "1.000" if 'alpha' not in colour['representations'][0]['content'] else round(
                            colour['representations'][0]['content']['alpha'], 3)

                        # Setting name to be #hex format if colour name is empty
                        if colour['name'] != '':
                            colourName = trimName(colour['name']) + str(br)
                        else:
                            colourName = 'gradient_colour_' + str(br) + '_' + str(convertToHex(r) + convertToHex(g) + convertToHex(b))

                        file.write(
                            '\t@nonobjc class var ' + colourName + ': UIColor {\r\n\t\treturn UIColor(red: ' + str(
                                r) + ', green: ' + str(g) + ', blue: ' + str(b) + ', alpha: ' + str(
                                alpha) + ')\r\n\t}\r\n\r\n')


        file.write('}')

def makeColourPaletteXcassets(path, colours):
    # Make Contents.json file
    file = open(path + '/Iwen Colours/IOS/Colours.xcassets/Contents.json', 'w+')
    file.write('{\r\n\t"info" : {\r\n\t\t"version" : 1,\r\n\t\t"author" : "xcode"\r\n\t}\r\n}')

#     Making folders
    for colour in colours:
        # Color in r g b and alpha
        if 'fontColor' in colour['representations'][0]['content']:
            pass

        else:
            if colour['type'].find("gradient") == -1:
                if 'value' in colour['representations'][0]['content']:
                    r = colour['representations'][0]['content']['value']['r']
                    g = colour['representations'][0]['content']['value']['g']
                    b = colour['representations'][0]['content']['value']['b']
                else:
                    r = colour['representations'][0]['content'][0]['color']['value']['r']
                    g = colour['representations'][0]['content'][0]['color']['value']['g']
                    b = colour['representations'][0]['content'][0]['color']['value']['b']
                alpha = "1.000" if 'alpha' not in colour['representations'][0]['content'] else round(
                    colour['representations'][0]['content']['alpha'], 3)

                # Setting name to be #hex format if colour name is empty
                if colour['name'] != '':
                    colourName = trimName(colour['name'])
                else:
                    colourName = 'colour_' + str(convertToHex(r) + convertToHex(g) + convertToHex(b))

                os.mkdir(
                    path + '/Iwen Colours/IOS/Colours.xcassets/' + colourName + '.colorset')  # make colorset folder

                # Make Contents.json file in colorset folder`
                fileInColorset = open(
                    path + '/Iwen Colours/IOS/Colours.xcassets/' + colourName + '.colorset/Contents.json', 'w+')
                fileInColorset.write(
                    '{\r\n\t"info" : {\r\n\t\t"version" : 1,\r\n\t\t"author" : "xcode"\r\n},\r\n\t"colors" : [\r\n\t\t{\r\n\t\t\t"idiom" : "universal",\r\n\t\t\t"color" : {\r\n\t\t\t\t"color-space" : "srgb",\r\n\t\t\t\t"components" : {')
                fileInColorset.write('\r\n\t\t\t\t\t"red" : "' + str(r) + '",\r\n\t\t\t\t\t"alpha" : "' + str(
                    alpha) + '",\r\n\t\t\t\t\t"blue" : "' + str(b) + '",\r\n\t\t\t\t\t"green" : "' + str(
                    g) + '"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}')


            else:
                br = 0
                for gradient in colour['representations'][0]['content']:
                    br += 1
                    r = gradient['color']['value']['r']
                    g = gradient['color']['value']['g']
                    b = gradient['color']['value']['b']
                    alpha = "1.000" if 'alpha' not in colour['representations'][0]['content'] else round(
                        colour['representations'][0]['content']['alpha'], 3)

                    # Setting name to be #hex format if colour name is empty
                    if colour['name'] != '':
                        colourName = trimName(colour['name']) + str(br)
                    else:
                        colourName = 'gradient_colour_' + str(br) + '_' + str(
                            convertToHex(r) + convertToHex(g) + convertToHex(b))

                    os.mkdir(
                            path + '/Iwen Colours/IOS/Colours.xcassets/' + colourName + '.colorset')  # make colorset folder

                    # Make Contents.json file in colorset folder`
                    fileInColorset = open(
                        path + '/Iwen Colours/IOS/Colours.xcassets/' + colourName + '.colorset/Contents.json', 'w+')
                    fileInColorset.write(
                        '{\r\n\t"info" : {\r\n\t\t"version" : 1,\r\n\t\t"author" : "xcode"\r\n},\r\n\t"colors" : [\r\n\t\t{\r\n\t\t\t"idiom" : "universal",\r\n\t\t\t"color" : {\r\n\t\t\t\t"color-space" : "srgb",\r\n\t\t\t\t"components" : {')
                    fileInColorset.write('\r\n\t\t\t\t\t"red" : "' + str(r) + '",\r\n\t\t\t\t\t"alpha" : "' + str(
                        alpha) + '",\r\n\t\t\t\t\t"blue" : "' + str(b) + '",\r\n\t\t\t\t\t"green" : "' + str(
                        g) + '"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}')

def makeColourCodeForAndroid(path, colours):
    file = open(path + '/Iwen Colours/Android/colors.xml', 'w+')
    file.write('// Colours generated by Iwen \r\n<?xml version="1.0" encoding="utf-8"?>\r\n</resources>')

    for colour in colours:
        # Color in r g b and alpha
        if 'fontColor' in colour['representations'][0]['content']:
            pass
        else:
            if colour['type'].find("gradient") == -1:
                if 'value' in colour['representations'][0]['content']:
                    r = colour['representations'][0]['content']['value']['r']
                    g = colour['representations'][0]['content']['value']['g']
                    b = colour['representations'][0]['content']['value']['b']
                else:
                    r = colour['representations'][0]['content'][0]['color']['value']['r']
                    g = colour['representations'][0]['content'][0]['color']['value']['g']
                    b = colour['representations'][0]['content'][0]['color']['value']['b']
                alpha = "1.000" if 'alpha' not in colour['representations'][0]['content'] else round(
                    colour['representations'][0]['content']['alpha'], 3)

                # Colour in #ARGB format
                hexColour = "#" + alpha + str(convertToHex(r) + convertToHex(g) + convertToHex(b))

                # Setting name to be colour_#ARGB format if colour name is empty
                colourName = trimName(colour['name']) if colour['name'] != '' else 'color_' + hexColour.replace('#', '')

                file.write('\r\n\t<color name="' + colourName + '">' + hexColour + '</color>')

            else:
                br = 0
                for gradient in colour['representations'][0]['content']:
                    br += 1
                    r = gradient['color']['value']['r']
                    g = gradient['color']['value']['g']
                    b = gradient['color']['value']['b']
                    alpha = "1.000" if 'alpha' not in colour['representations'][0]['content'] else round(
                        colour['representations'][0]['content']['alpha'], 3)

                    # Colour in #ARGB format
                    hexColour = "#" + alpha + str(convertToHex(r) + convertToHex(g) + convertToHex(b))

                    # Setting name to be colour_#ARGB format if colour name is empty
                    if colour['name'] != '':
                        colourName = trimName(colour['name']) + str(br)
                    else:
                        colourName = 'color_' + hexColour.replace('#', '') + str(br)

                    file.write('\r\n\t<color name="' + colourName + '">' + hexColour + '</color>')

    file.write('\r\n</resources>')

def makeJsonFile(path, colours):
    file = open(path + '/colours.json', 'w+')
    file.write('[')
    a = 0
    for colour in colours:
        # Color in r g b and alpha
        if 'fontColor' in colour['representations'][0]['content']:
            pass

        else:
            if colour['type'].find("gradient") == -1:
                if 'value' in colour['representations'][0]['content']:
                    r = colour['representations'][0]['content']['value']['r']
                    g = colour['representations'][0]['content']['value']['g']
                    b = colour['representations'][0]['content']['value']['b']
                else:
                    r = colour['representations'][0]['content'][0]['color']['value']['r']
                    g = colour['representations'][0]['content'][0]['color']['value']['g']
                    b = colour['representations'][0]['content'][0]['color']['value']['b']
                alpha = "1.000" if 'alpha' not in colour['representations'][0]['content'] else round(
                    colour['representations'][0]['content']['alpha'], 3)

                # Colour in #ARGB format
                hexColour = str(convertToHex(r) + convertToHex(g) + convertToHex(b))

                # Setting name to be colour_#ARGB format if colour name is empty
                colourName = trimName(colour['name']) if colour['name'] != '' else 'color_' + hexColour

                if a > 0:
                    file.write(',')
                a = 1

                file.write(
                    '\r\n\t{ "name": "' + colourName + '", "r": "' + str(r) + '", "g": "' + str(g) + '", "b": "' + str(
                        b) + '", "a": "' + alpha + '" }')
            else:
                br = 0
                for gradient in colour['representations'][0]['content']:
                    br += 1
                    r = gradient['color']['value']['r']
                    g = gradient['color']['value']['g']
                    b = gradient['color']['value']['b']
                    alpha = "1.000" if 'alpha' not in colour['representations'][0]['content'] else round(
                        colour['representations'][0]['content']['alpha'], 3)

                    # Colour in #ARGB format
                    hexColour = str(convertToHex(r) + convertToHex(g) + convertToHex(b))

                    # Setting name to be colour_#ARGB format if colour name is empty
                    colourName = trimName(colour['name']) + str(br) if colour['name'] != '' else 'color_' + hexColour + str(br)

                    if a > 0:
                        file.write(',')
                    a = 1

                    file.write('\r\n\t{ "name": "' + colourName + '", "r": "' + str(r) + '", "g": "' + str(
                        g) + '", "b": "' + str(b) + '", "a": "' + alpha + '" }')

    file.write('\r\n]')

def makeClrFile(path):
    command = 'swift -suppress-warnings makeClrFile.swift -n "iwenColours" -i '+path+'/colours.json -o '+path+'/Iwen\ Colours/IOS'
    process = os.popen(command)
    results = str(process.read())
    os.remove(path + "/colours.json")
    if results == "SUCCESS\n":
        return "OK"
    else:
        if results.split(' ', 1)[0] == "xcode-select:":
            return "X"
        else:
            return results

def convertToHex(decimalNumber):
    return "00" if decimalNumber <= 0 else hex(decimalNumber).lstrip("0x").rstrip("L")

def zipdir(path, ziph):
    # ziph is zipfile handle
    for root, dirs, files in os.walk(path):
        for file in files:
            ziph.write(os.path.join(root, file))

def removeUnzippedDir(path):
    if os.path.isdir(path+'/Iwen Colours'):
         shutil.rmtree(path+'/Iwen Colours')

def trimName(name):
    trimmedName = re.sub('[^A-Za-z0-9]+', '', name)
    return trimmedName[0].lower() + trimmedName[1:]
